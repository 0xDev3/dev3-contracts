{
    "$schema": "../../schema.json",
    "tags": [
        "nft distribution",
        "vouchers",
        "secret code airdrop"
    ],
    "implements": [
        "traits.ownable",
        "traits.erc721receivable"
    ],
    "name": "Nft Rewarder",
    "description": "Smart contract which allows creating claimable nft coupons.",
    "eventDecorators": [
        {
            "signature": "AddReward(bytes32)",
            "name": "Create coupon",
            "description": "Emitted when the new coupon code is created.",
            "parameterDecorators": [
                {
                    "name": "Coupon code",
                    "description": "Coupon code identifier",
                    "recommendedTypes": []
                }
            ]
        },
        {
            "signature": "ClaimReward(address,bytes32)",
            "name": "Use coupon",
            "description": "Emitted when the coupon code is used.",
            "parameterDecorators": [
                {
                    "name": "Coupon user",
                    "description": "Coupon user",
                    "recommendedTypes": []
                },
                {
                    "name": "Coupon code",
                    "description": "Coupon code identifier",
                    "recommendedTypes": []
                }
            ]
        },
        {
            "signature": "OwnershipTransferred(address,address)",
            "name": "Ownership transferred",
            "description": "Emitted when the owner is changed to a new address.",
            "parameterDecorators": [
                {
                    "name": "Old owner",
                    "description": "Wallet address of the old owner who initiated the ownership change.",
                    "recommendedTypes": []
                },
                {
                    "name": "New owner",
                    "description": "Wallet address of the newly configured owner.",
                    "recommendedTypes": []
                }
            ]
        }
    ],
    "constructorDecorators": [
        {
            "signature": "constructor(address)",
            "name": "Constructor",
            "description": "Creates new coupone programme service",
            "parameterDecorators": [
                {
                    "name": "Owner",
                    "description": "Wallet address of the coupon programme administrator",
                    "recommendedTypes": [
                        "traits.contractCaller"
                    ]
                }
            ]
        }
    ],
    "functionDecorators": [
        {
            "signature": "addRewards(tuple(bytes32,address,uint256,uint256)[])",
            "name": "Create coupons",
            "description": "Creates batch of coupons",
            "parameterDecorators": [
                {
                    "name": "Coupons",
                    "description": "List of generated coupons",
                    "recommendedTypes": [],
                    "parameters": [
                        {
                            "name": "Coupon identifier",
                            "description": "Coupon identifier",
                            "recommendedTypes": []
                        },
                        {
                            "name": "Reward NFT token",
                            "description": "NFT Token received when using the coupon",
                            "recommendedTypes": [
                                "traits.erc721"
                            ]
                        },
                        {
                            "name": "Token Id",
                            "description": "Concrete NFT item id from the given nft collection, claimable by using this coupon",
                            "recommendedTypes": []
                        },
                        {
                            "name": "Expiry date",
                            "description": "The deadline for the coupon usage",
                            "recommendedTypes": [
                                "types.unixTimestamp"
                            ]
                        }
                    ]
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [
                "AddReward(bytes32)"
            ]
        },
        {
            "signature": "claimReward(string)",
            "name": "Use coupon",
            "description": "Claims the coupon",
            "parameterDecorators": [
                {
                    "name": "Coupon",
                    "description": "Coupon identifier being used",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [
                "ClaimReward(address,bytes32)"
            ]
        },
        {
            "signature": "owner()",
            "name": "Get Admin",
            "description": "Returns the coupon administrator",
            "parameterDecorators": [],
            "returnDecorators": [
                {
                    "name": "Admin",
                    "description": "Coupon administrator",
                    "recommendedTypes": []
                }
            ],
            "emittableEvents": []
        },
        {
            "signature": "renounceOwnership()",
            "name": "Renounce Admin Role",
            "description": "Admin will remove his rights leaving the coupon programme without an administrator. This operation is dangeorous as admin is the only account with the rights to create new coupons or revoke pending rewards.",
            "parameterDecorators": [],
            "returnDecorators": [],
            "emittableEvents": [
                "OwnershipTransferred(address,address)"
            ]
        },
        {
            "signature": "transferOwnership(address)",
            "name": "Transfer ownership",
            "description": "Transfer admin role to another account. This operation is dangeorous as admin is the only account with the rights to create new coupons or revoke pending rewards.",
            "parameterDecorators": [
                {
                    "name": "New Admin",
                    "description": "New Admin account",
                    "recommendedTypes": [
                        "traits.contractCaller"
                    ]
                }
            ],
            "returnDecorators": [],
            "emittableEvents": [
                "OwnershipTransferred(address,address)"
            ]
        },
        {
            "signature": "calculateHashString(string)",
            "name": "Calculate hash string",
            "description": "Calculates the hash string for the given secret key. The hash has to be attached to the reward data then calling the addRewards function. The secret key from which the hash was generated must be provided in the claim function to claim the reward successfully.",
            "parameterDecorators": [
                {
                    "name": "Secret key",
                    "description": "Secret key",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Calculated hash string",
                    "description": "Calculated hash string",
                    "recommendedTypes": []
                }
            ],
            "emittableEvents": []
        },
        {
            "signature": "calculateHashStrings(string[])",
            "name": "Calculate hash strings",
            "description": "Calculates the hash strings for the given list of secret keys.",
            "parameterDecorators": [
                {
                    "name": "Secret keys list",
                    "description": "Secret keys list",
                    "recommendedTypes": []
                }
            ],
            "returnDecorators": [
                {
                    "name": "Calculated hash strings list",
                    "description": "Calculated hash strings list",
                    "recommendedTypes": []
                }
            ],
            "emittableEvents": []
        }
    ]
}
