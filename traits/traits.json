{
    "$schema": "./schema.json",
    "traits": {
        "erc20": {
            "name": "ERC20 token",
            "description": "Smart contracts that conform to the IERC20 token standard.",
            "interfaces": ["common/IERC20"]
        },
        "erc20metadata": {
            "name": "ERC20 token with metadata",
            "description": "Smart contracts that conform to the IERC20 token standard while also having the three additional properties: name, symbol and decimals.",
            "interfaces": ["common/IERC20Metadata"]
        },
        "erc20burnable": {
            "name": "ERC20 burnable token",
            "description": "Smart contracts that conform to the IERC20 token standard while also allowing the token holders to burn their tokens and as a result reduce the total supply of the token.",
            "interfaces": ["common/IERC20Burnable"]
        },
        "erc20mintable": {
            "name": "ERC20 mintable token",
            "description": "Smart contracts that conform to the IERC20 token standard while also allowing for a creation of new tokens and as a result increasing the total token supply.",
            "interfaces": ["common/IERC20Mintable"]
        },
        "erc20wrapper": {
            "name": "ERC20 wrapper",
            "description": "Wraps underlying ERC20 token. Users can deposit and withdraw 'underlying tokens' and receive a matching number of 'wrapped tokens'.",
            "interfaces": []
        },
        "erc20votes": {
            "name": "ERC20 votes",
            "description": "Extension of ERC20 to support Compound-like voting and delegation.",
            "interfaces": []
        },
        "erc20permit": {
            "name": "ERC20 permit",
            "description": "ERC20 Permit extension allowing approvals to be made via signatures, as defined in EIP-2612.",
            "interfaces": []
        },
        "erc721": {
            "name": "ERC721 token",
            "description": "Smart contracts that conform to the IERC721 non fungible token standard",
            "interfaces": ["common/IERC721"]
        },
        "erc721burnable": {
            "name": "ERC721 burnable token",
            "description": "Smart contracts that conform to the IERC721 non fungible token standard while also allowing the token holders to burn their tokens.",
            "interfaces": ["common/IERC721Burnable"]
        },
        "erc721receivable": {
            "name": "ERC721 receivable",
            "description": "Smart contracts with the ability of safely receiving any ERC721 token.",
            "interfaces": []
        },
        "ownable": {
            "name": "Ownable contract",
            "description": "Smart contracts that conform to the Ownable interface proposed by the OpenZeppelin.",
            "interfaces": ["common/Ownable"]
        },
        "contractCaller": {
            "name": "Contract caller",
            "description": "External wallets or smart contracts with the ability of calling other smart contracts dinamically (for example, Governor by OpenZeppelin)",
            "interfaces": [ ]
        },
        "erc20receivable": {
            "name": "ERC20 receivable",
            "description": "Smart contracts with the ability of safely receiving any ERC20 token.",
            "interfaces": [ ]
        },
        "dev3.versioned": {
            "name": "Versioned contract",
            "description": "Contracts with this trait contain name and version strings readable by outside world.",
            "interfaces": ["dev3/IVersioned"]
        },
        "dev3.campaign-common": {
            "name": "Common crowdfuding campaign interface",
            "description": "Interface representing common features of the crowdfunding campaigns created using dev3.sh contracts",
            "interfaces": ["dev3/ICampaignCommon"]
        },
        "dev3.acfmanager": {
            "name": "Abstract crowdfunding manager implemented by dev3.sh",
            "description": "Core abstract contract used for building concrete crowdfunding contract implementations. Provided by dev3.sh",
            "interfaces": ["dev3/IACfManager"]
        },
        "dev3.cfmanagersoftcap": {
            "name": "Simple crowdfuding campaign contract implemented by dev3.sh",
            "description": "Enables selling any erc20 token for any another erc20 token by configuring details such as sell price, soft cap, min and max per user investments etc.",
            "interfaces": ["dev3/ICfManagerSoftcap"]
        },
        "dev3.cfmanagersoftcapvesting": {
            "name": "Crowdfunding campaign contract with vested token rewards implemented by dev3.sh",
            "description": "Enables selling any erc20 token for any another erc20 token by configuring details such as sell price, soft cap, min and max per user investments etc. The tokens sold via the campaign are distributed to the investors bit by bit by defining the vesting schedule.",
            "interfaces": ["dev3/ICfManagerSoftcapVesting"]
        },
        "dev3.issuer-common": {
            "name": "Common issuer interface",
            "description": "Organizational unit holding multiple assets and/or running crowdfunding campaigns to sell the assets to investors. It's primary purpose is to hold whitelisted wallet registry enabling parties whitelisted parties to transact with and invest into the Issuer's assets.",
            "interfaces": ["dev3/IIssuerCommon"]
        },
        "dev3.campaignfeemanager": {
            "name": "Campaign fee manager",
            "description": "Fee manager used to manage fees on crowdfunding campaigns. Fee manager can define two things: fee percentage and fee beneciary. Fee percentage is taken from the total funds raised when the campaing is closed, and is routed to the fee beneficiary wallet.",
            "interfaces": ["dev3/ICampaignFeeManager"]
        }
    }
}
